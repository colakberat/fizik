---
---

<div class="particles-container">
  <div id="particles"></div>
</div>

<script>
  class Particle {
    constructor(container) {
      this.container = container;
      this.element = document.createElement('div');
      this.element.classList.add('particle');
      
      // Random properties
      this.size = Math.random() * 5 + 2;
      this.x = Math.random() * window.innerWidth;
      this.y = Math.random() * window.innerHeight;
      this.speedX = Math.random() * 0.5 - 0.25;
      this.speedY = Math.random() * 0.5 - 0.25;
      
      // Theming
      const isDark = document.documentElement.classList.contains('dark');
      const opacity = (Math.random() * 0.5 + 0.1).toFixed(2);
      
      // Set styles
      Object.assign(this.element.style, {
        width: `${this.size}px`,
        height: `${this.size}px`,
        left: `${this.x}px`,
        top: `${this.y}px`,
        opacity: opacity,
        background: isDark ? 
          `rgba(100, 181, 246, ${opacity})` : // Blue for dark mode
          `rgba(25, 118, 210, ${opacity})`,   // Darker blue for light mode
        boxShadow: `0 0 ${this.size * 2}px rgba(100, 181, 246, ${opacity})`,
        animation: `pulse ${Math.random() * 3 + 2}s infinite alternate, float ${Math.random() * 5 + 3}s infinite alternate`
      });
      
      this.container.appendChild(this.element);
    }
    
    update() {
      this.x += this.speedX;
      this.y += this.speedY;
      
      // Boundary check
      if (this.x < 0 || this.x > window.innerWidth) {
        this.speedX = -this.speedX;
      }
      
      if (this.y < 0 || this.y > window.innerHeight) {
        this.speedY = -this.speedY;
      }
      
      // Update position
      this.element.style.left = `${this.x}px`;
      this.element.style.top = `${this.y}px`;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('particles');
    if (!container) return;
    
    const particles = [];
    const particleCount = Math.min(window.innerWidth / 10, 50); // Responsive count
    
    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle(container));
    }
    
    function animate() {
      particles.forEach(particle => particle.update());
      requestAnimationFrame(animate);
    }
    
    animate();
    
    // Update on theme change
    const observer = new MutationObserver(() => {
      while (container.firstChild) {
        container.removeChild(container.firstChild);
      }
      
      particles.length = 0;
      for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle(container));
      }
    });
    
    observer.observe(document.documentElement, { 
      attributes: true, 
      attributeFilter: ['class'] 
    });
  });
</script>

<style>
  #particles {
    width: 100%;
    height: 100%;
    position: relative;
  }
</style>